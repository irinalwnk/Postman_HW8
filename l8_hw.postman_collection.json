{
	"info": {
		"_postman_id": "703e1157-cd40-49da-b44c-58504e5756f3",
		"name": "l8_hw",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20654770"
	},
	"item": [
		{
			"name": "HW_8_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200  \r",
							"pm.test(\"first Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.  \r",
							"pm.test(\"correct string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_8_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200  \r",
							"pm.test(\"user_info_3 Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json. \r",
							"let ResponseData = pm.response.json();\r",
							"console.log(ResponseData);\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name в ответе равен name в запросе\", function () {\r",
							"    pm.expect(ResponseData.name).to.eql(\"Alex\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)  \r",
							"pm.test(\"age в ответе равен age в запросе\", function () {\r",
							"    pm.expect(ResponseData.age).to.eql(\"32\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary в ответе равен salary в запросе\", function () {\r",
							"    pm.expect(ResponseData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let RequestData = request.data;\r",
							"console.log('request data:', RequestData)\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.) \r",
							"pm.test(\"значения ключей name в ответе и в запросе совпадают\", function () {\r",
							"    pm.expect(ResponseData.name).to.eql(RequestData.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"значения ключей age в ответе и в запросе совпадают\", function () {\r",
							"    pm.expect(ResponseData.age).to.eql(RequestData.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.) \r",
							"pm.test(\"значения ключей salary в ответе и в запросе совпадают\", function () {\r",
							"    pm.expect(ResponseData.salary).to.eql(+RequestData.salary);\r",
							"    /* или\r",
							"    pm.expect(ResponseData.salary).to.eql(Number(RequestData.salary)); */\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.  \r",
							"console.log('Family:', ResponseData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year в ответе равно salary*4\", function () {\r",
							"    pm.expect(ResponseData.family.u_salary_1_5_year).to.eql(+RequestData.salary*4);\r",
							" });   "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_8_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200  \r",
							"pm.test(\"object_info_3 Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let ResponseBody =  pm.response.json();\r",
							"console.log('Response Body:', ResponseBody);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let RequestData = pm.request.url.query.toObject();\r",
							"console.log('RequestData: ', RequestData);\r",
							"\r",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name в ответе равен name в запросе\", function () {\r",
							"    pm.expect(ResponseBody.name).to.eql(RequestData.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age в ответе равен age в запросе\", function () {\r",
							"    pm.expect(ResponseBody.age).to.eql(RequestData.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary в ответе равен salary в запросе\", function () {\r",
							"    pm.expect(ResponseBody.salary).to.eql(+RequestData.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log('Family:', ResponseBody.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog has a name\", function () {  \r",
							"\tpm.expect(ResponseBody.family.pets.dog).to.haveOwnProperty('name');   \r",
							"});   \r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age. \r",
							"pm.test(\"dog has an age\", function () {  \r",
							"\tpm.expect(ResponseBody.family.pets.dog).to.haveOwnProperty('age');   \r",
							"});   \r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dogs name is Luky\", function () {  \r",
							"\tpm.expect(ResponseBody.family.pets.dog.name).to.eql('Luky');   \r",
							"});   \r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"параметр age имеет значение 4\", function () {  \r",
							"\tpm.expect(ResponseBody.family.pets.dog.age).to.eql(4);   \r",
							"});  \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_8_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200  \r",
							"pm.test(\"object_info_3 Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.  \r",
							"let ResponseBody =  pm.response.json();  \r",
							"console.log('Response Body:', ResponseBody);\r",
							"\r",
							"//4. Спарсить request.  \r",
							"let RequestData = pm.request.url.query.toObject();  \r",
							"console.log('Request Data: ', RequestData);\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.) \r",
							"pm.test(\"name в ответе равен name в запросе\", function () {  \r",
							"    pm.expect(ResponseBody.name).to.eql(RequestData.name);  \r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.) \r",
							"pm.test(\"age в ответе равен age в запросе\", function () {  \r",
							"\tpm.expect(ResponseBody.age).to.eql(+RequestData.age);  \r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.  \r",
							"console.log('salary from Request:', RequestData.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response. \r",
							"console.log('salary from Response:', ResponseBody.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.  \r",
							"console.log('salary element 0:', ResponseBody.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log('salary element 1:', ResponseBody.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log('salary element 2:', ResponseBody.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary  в ответе равен salary в запросе\", function () {  \r",
							"\tpm.expect(ResponseBody.salary[0]).to.eql(+RequestData.salary);  \r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary element 1 equal salary*2 request\", function () {  \r",
							"\tpm.expect(+ResponseBody.salary[1]).to.eql(RequestData.salary*2);  \r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary element 2 equal salary*3 request\", function () {  \r",
							"\tpm.expect(+ResponseBody.salary[2]).to.eql(RequestData.salary*3);  \r",
							"});\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", ResponseBody.name);\r",
							"\r",
							"//19. Передать в окружение переменную age  \r",
							"pm.environment.set(\"age\", ResponseBody.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", ResponseBody.salary[0]);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (let i of ResponseBody.salary) {\r",
							"    console.log('Elements of salary:',i);\r",
							"}\r",
							"\r",
							"    \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_8_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200. \r",
							"pm.test(\"user_info_2 код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.  \r",
							"let ResponseBody =  pm.response.json();  \r",
							"console.log('Response Body:', ResponseBody);\r",
							"\r",
							"//7. Спарсить request.  \r",
							"let RequestData = request.data;  \r",
							"console.log('request data:', RequestData);\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary.\r",
							"pm.test(\"responce has a start_qa_salary\", function () {  \r",
							"\tpm.expect(ResponseBody).to.haveOwnProperty('start_qa_salary');   \r",
							"});   \r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months.  \r",
							"pm.test(\"responce has a qa_salary_after_6_months\", function () {  \r",
							"\tpm.expect(ResponseBody).to.haveOwnProperty('qa_salary_after_6_months');   \r",
							"});   \r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months.  \r",
							"pm.test(\"responce has a qa_salary_after_12_months\", function () {  \r",
							"    pm.expect(ResponseBody).to.haveOwnProperty('qa_salary_after_12_months');   \r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year.\r",
							"pm.test(\"responce has a qa_salary_after_1.5_year\", function () {  \r",
							"    pm.expect(ResponseBody).to.haveOwnProperty('qa_salary_after_1.5_year');   \r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years. \r",
							"pm.test(\"responce has a qa_salary_after_3.5_years\", function () {  \r",
							"    pm.expect(ResponseBody).to.haveOwnProperty('qa_salary_after_3.5_years');   \r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person.  \r",
							"pm.test(\"responce has a person\", function () {  \r",
							"    pm.expect(ResponseBody).to.haveOwnProperty('person');   \r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request).\r",
							"pm.test(\"start_qa_salary equal salary request\", function () {    \r",
							"\tpm.expect(ResponseBody.start_qa_salary).to.eql(+RequestData.salary);    \r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request).\r",
							"pm.test(\"qa_salary_after_6_months equal salary*2 request\", function () {    \r",
							"\tpm.expect(ResponseBody.qa_salary_after_6_months).to.eql(+RequestData.salary*2);    \r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request).  \r",
							"pm.test(\"qa_salary_after_12_months equal salary*2.7 request\", function () {    \r",
							"\tpm.expect(ResponseBody.qa_salary_after_12_months).to.eql(+RequestData.salary*2.7);    \r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request).  \r",
							"pm.test(\"qa_salary_after_1.5_year equal salary*3.3 request\", function () {    \r",
							"\tpm.expect(ResponseBody['qa_salary_after_1.5_year']).to.eql(+RequestData.salary*3.3);    \r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request). \r",
							"pm.test(\"qa_salary_after_3.5_years equal salary*3.8 request\", function () {    \r",
							"\tpm.expect(ResponseBody['qa_salary_after_3.5_years']).to.eql(+RequestData.salary*3.8);    \r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request). \r",
							"pm.test(\"persons 1 element equel salary from request\", function () {    \r",
							"\tpm.expect(ResponseBody.person.u_name[1]).to.eql(+RequestData.salary);    \r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request).  \r",
							"pm.test(\"u_age equel age from request\", function () {    \r",
							"\tpm.expect(ResponseBody.person.u_age).to.eql(+RequestData.age);    \r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request).  \r",
							"pm.test(\"u_salary_5_years equel salary*4.2 request\", function () {    \r",
							"\tpm.expect(ResponseBody.person.u_salary_5_years).to.eql(+RequestData.salary*4.2);    \r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in ResponseBody.person) {\r",
							"    console.log('Elements of person:',i);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
} 
